// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"certitrack/internal/config"
	"certitrack/internal/database"
	"certitrack/internal/handlers"
	"certitrack/internal/repositories"
	"certitrack/internal/router"
	"certitrack/internal/services"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"gorm.io/gorm"
)

// Injectors from wire.go:

// InitializeServer inicializa todas las dependencias del servidor
func InitializeServer() (*ServerDependencies, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	db, err := database.Connect(configConfig)
	if err != nil {
		return nil, err
	}
	userRepository := repositories.NewUserRepositoryImpl(db)
	authServiceImpl := services.NewAuthService(configConfig, userRepository)
	authHandler := handlers.NewAuthHandler(authServiceImpl)
	engine, err := provideRouter(configConfig, db, authHandler)
	if err != nil {
		return nil, err
	}
	serverDependencies := &ServerDependencies{
		Config: configConfig,
		DB:     db,
		Router: engine,
	}
	return serverDependencies, nil
}

// wire.go:

var (
	// Conjunto de dependencias para autenticaci√≥n
	authDeps = wire.NewSet(handlers.NewAuthHandler, services.NewAuthService, repositories.NewUserRepositoryImpl, wire.Bind(new(services.AuthService), new(*services.AuthServiceImpl)))

	// Conjunto de dependencias de la base de datos
	dbDeps = wire.NewSet(config.Load, database.Connect)
)

// ServerDependencies contiene todas las dependencias necesarias para el servidor
type ServerDependencies struct {
	Config *config.Config
	DB     *gorm.DB
	Router *gin.Engine
}

// provideRouter crea y configura el router con sus dependencias
func provideRouter(
	cfg *config.Config,
	db *gorm.DB,
	authHandler *handlers.AuthHandler,
) (*gin.Engine, error) {
	r := gin.Default()
	router.SetupRouter(db, cfg, r)

	return r, nil
}
