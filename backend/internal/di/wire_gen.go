// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"certitrack/internal/cache/redis"
	"certitrack/internal/config"
	"certitrack/internal/database"
	"certitrack/internal/handlers"
	"certitrack/internal/middleware"
	"certitrack/internal/repositories"
	"certitrack/internal/services"
	"github.com/google/wire"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitializeServer() (*ServerDependencies, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	db, err := database.Connect(configConfig)
	if err != nil {
		return nil, err
	}
	userRepository := repositories.NewUserRepositoryImpl(db)
	redisConfig := provideRedisConfig(configConfig)
	client, err := redis.NewClient(redisConfig)
	if err != nil {
		return nil, err
	}
	tokenRepository := repositories.NewTokenRepository(client)
	authServiceImpl := services.NewAuthService(configConfig, userRepository, tokenRepository)
	authHandler := handlers.NewAuthHandler(authServiceImpl)
	middlewareMiddleware := middleware.NewMiddleware(authServiceImpl)
	serverDependencies := &ServerDependencies{
		Config:      configConfig,
		DB:          db,
		AuthHandler: authHandler,
		Middleware:  middlewareMiddleware,
	}
	return serverDependencies, nil
}

// wire.go:

func provideRedisConfig(cfg *config.Config) *config.RedisConfig {
	return &cfg.Redis
}

var (
	redisClientSet = wire.NewSet(
		provideRedisConfig, redis.NewClient, wire.Bind(new(repositories.RedisClient), new(*redis.Client)),
	)

	tokenRepositorySet = wire.NewSet(repositories.NewTokenRepository)

	repositorySet = wire.NewSet(repositories.NewUserRepositoryImpl)

	serviceSet = wire.NewSet(services.NewAuthService, wire.Bind(new(services.AuthService), new(*services.AuthServiceImpl)))

	handlerSet = wire.NewSet(handlers.NewAuthHandler)

	middlewareSet = wire.NewSet(middleware.NewMiddleware)
)

type ServerDependencies struct {
	Config      *config.Config
	DB          *gorm.DB
	AuthHandler *handlers.AuthHandler
	Middleware  *middleware.Middleware
}
